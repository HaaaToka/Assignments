import java.io.*;import java.util.*;public class Assignment1 {    static List<List<String>> table = new ArrayList<>();    static String[] trash;    private static void printConsole(float[][] arr,int len){        for(int i=0;i<len;i++)System.out.println(arr[i][0]+" "+arr[i][1]);    }    private static void printCSV(String[] columnNames,float[][] sirali, String filePath) {        try (FileWriter output = new FileWriter(filePath)) {            for (String elem : columnNames) {                output.append(elem);                output.append(",");            }            int i;            for(float[] elem : sirali){                output.append("\n");                i=(int) elem[0];                for(String inf : table.get(i)){                    output.append(inf);                    output.append(",");                }            }        } catch (Exception e) {            e.printStackTrace();        }    }    public static void main(String[] args) {        long s;        String csvFile = args[0];        int whichColumn = Integer.parseInt(args[1])-1;        char TorF = args[2].charAt(0);        BufferedReader br = null;        String line = "";        String cvsSplitBy = ",";        int i=0;        try {            br = new BufferedReader(new FileReader(csvFile));            line=br.readLine();            trash = line.split(cvsSplitBy);            //for (String elem:trash)System.out.println(elem);            //create table 2D array            String[] country;            while ((line = br.readLine()) != null) {                table.add(new ArrayList<>());                country = line.split(cvsSplitBy);                for(String elem:country)table.get(i).add(elem);                i++;            }        } catch (Exception e) {e.printStackTrace();}        int sizeTable = table.size();        float[][] goingBubble = new float[sizeTable][2];        float[][] goingQuick = new float[sizeTable][2];        float[][] goingHeap = new float[sizeTable][2];        for(i=0;i<sizeTable;i++){            float temp=Float.parseFloat(table.get(i).get(whichColumn));            goingBubble[i][0]=i;            goingBubble[i][1]=temp;            goingHeap[i][0]=i;            goingHeap[i][1]=temp;            goingQuick[i][0]=i;            goingQuick[i][1]=temp;        }        //s=System.currentTimeMillis();        BubbleSort bs = new BubbleSort();        bs.bubleSort(goingBubble,sizeTable);        /*System.out.print("BUBBLE-->>");        System.out.print(System.currentTimeMillis()-s+" ");        System.out.println(((System.currentTimeMillis()-s)/1000.00)%60);        printConsole(goingBubble,sizeTable);*/        //s=System.currentTimeMillis();        HeapSort hs = new HeapSort();        hs.sort(goingHeap,sizeTable);        /*System.out.print("HEAP-->>");        System.out.print(System.currentTimeMillis()-s+" ");        System.out.println(((System.currentTimeMillis()-s)/1000.00)%60);*/        //s=System.currentTimeMillis();        QuickSort qs = new QuickSort();        qs.quicksort(goingQuick,0,sizeTable-1);        /*System.out.print("QUICK-->>");        System.out.print(System.currentTimeMillis()-s+" ");        System.out.println(((System.currentTimeMillis()-s)/1000.00)%60);*/        if(TorF=='T')printCSV(trash,goingQuick,csvFile);    }}class QuickSort {    void quicksort(float arr[][], int left, int right) {        float[] temp;        float pivot = arr[left + (right - left) / 2][1];        int i = left;        int j = right;        while (i <= j) {            while (arr[i][1] < pivot) {                i++;            }            while (arr[j][1] > pivot) {                j--;            }            if (i <= j) {                temp = arr[i];                arr[i++] = arr[j];                arr[j--] = temp;            }        }        //partitaion        if (left < j) quicksort(arr, left, j);        if (i < right) quicksort(arr, i, right);    }}class HeapSort {    void sort(float arr[][], int len) {        float[] temp;        for (int i = len / 2 - 1; i >= 0; i--)            heapify(arr, len, i);        for (int i = len - 1; i >= 0; i--) {            temp = arr[0];            arr[0] = arr[i];            arr[i] = temp;            heapify(arr, i, 0);        }    }    private void heapify(float arr[][], int n, int i) {        float[] temp;        int largest = i;        int l = 2 * i + 1;        int r = 2 * i + 2;        if (l < n && arr[l][1] > arr[largest][1])            largest = l;        if (r < n && arr[r][1] > arr[largest][1])            largest = r;        if (largest != i) {            temp = arr[i];            arr[i] = arr[largest];            arr[largest] = temp;            heapify(arr, n, largest);        }    }}class BubbleSort{    void bubleSort(float[][] arr,int len){        boolean isswapped;        float[] temp;        for(int i=0;i<len-1;i++) {            isswapped=false;            for(int j = 0; j < len - i - 1; j++) {                if(arr[j][1]>arr[j+1][1]){                    temp = arr[j];                    arr[j]=arr[j+1];                    arr[j+1]=temp;                    isswapped = true;                }            }            if(!isswapped) break;        }    }}